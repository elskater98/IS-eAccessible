
package backendservlet;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SoapWebService", targetNamespace = "http://backendServlet/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SoapWebService {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<backendservlet.Local>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLocalsByName", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocalsByName")
    @ResponseWrapper(localName = "getLocalsByNameResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocalsByNameResponse")
    public List<Local> getLocalsByName(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<backendservlet.Characteristic>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCharacteristics", targetNamespace = "http://backendServlet/", className = "backendservlet.GetCharacteristics")
    @ResponseWrapper(localName = "getCharacteristicsResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetCharacteristicsResponse")
    public List<Characteristic> getCharacteristics(
        @WebParam(name = "arg0", targetNamespace = "")
        LocalType arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<backendservlet.Incidence>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIncidencesByIncidenceType", targetNamespace = "http://backendServlet/", className = "backendservlet.GetIncidencesByIncidenceType")
    @ResponseWrapper(localName = "getIncidencesByIncidenceTypeResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetIncidencesByIncidenceTypeResponse")
    public List<Incidence> getIncidencesByIncidenceType(
        @WebParam(name = "arg0", targetNamespace = "")
        IncidenceType arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns backendservlet.LocalType
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLocalType", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocalType")
    @ResponseWrapper(localName = "getLocalTypeResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocalTypeResponse")
    public LocalType getLocalType(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @return
     *     returns java.util.List<backendservlet.LocalType>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllLocalTypes", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAllLocalTypes")
    @ResponseWrapper(localName = "getAllLocalTypesResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAllLocalTypesResponse")
    public List<LocalType> getAllLocalTypes();

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "validateLocal", targetNamespace = "http://backendServlet/", className = "backendservlet.ValidateLocal")
    @ResponseWrapper(localName = "validateLocalResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.ValidateLocalResponse")
    public void validateLocal(
        @WebParam(name = "arg0", targetNamespace = "")
        Local arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns backendservlet.Local
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLocal", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocal")
    @ResponseWrapper(localName = "getLocalResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocalResponse")
    public Local getLocal(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "deleteLocalById", targetNamespace = "http://backendServlet/", className = "backendservlet.DeleteLocalById")
    @ResponseWrapper(localName = "deleteLocalByIdResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.DeleteLocalByIdResponse")
    public void deleteLocalById(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<backendservlet.Local>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLocalsByLocalTypeAndName", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocalsByLocalTypeAndName")
    @ResponseWrapper(localName = "getLocalsByLocalTypeAndNameResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetLocalsByLocalTypeAndNameResponse")
    public List<Local> getLocalsByLocalTypeAndName(
        @WebParam(name = "arg0", targetNamespace = "")
        LocalType arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<backendservlet.Accessibility>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addAccessibility", targetNamespace = "http://backendServlet/", className = "backendservlet.AddAccessibility")
    @ResponseWrapper(localName = "addAccessibilityResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.AddAccessibilityResponse")
    public List<Accessibility> addAccessibility(
        @WebParam(name = "arg0", targetNamespace = "")
        List<Accessibility> arg0);

    /**
     * 
     * @return
     *     returns java.util.List<backendservlet.Local>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllLocals", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAllLocals")
    @ResponseWrapper(localName = "getAllLocalsResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAllLocalsResponse")
    public List<Local> getAllLocals();

    /**
     * 
     * @param arg0
     * @return
     *     returns backendservlet.IncidenceType
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIncidenceType", targetNamespace = "http://backendServlet/", className = "backendservlet.GetIncidenceType")
    @ResponseWrapper(localName = "getIncidenceTypeResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetIncidenceTypeResponse")
    public IncidenceType getIncidenceType(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "addIncidence", targetNamespace = "http://backendServlet/", className = "backendservlet.AddIncidence")
    @ResponseWrapper(localName = "addIncidenceResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.AddIncidenceResponse")
    public void addIncidence(
        @WebParam(name = "arg0", targetNamespace = "")
        IncidenceType arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns backendservlet.Local
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addLocal", targetNamespace = "http://backendServlet/", className = "backendservlet.AddLocal")
    @ResponseWrapper(localName = "addLocalResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.AddLocalResponse")
    public Local addLocal(
        @WebParam(name = "arg0", targetNamespace = "")
        Local arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<backendservlet.Incidence>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIncidencesByDate", targetNamespace = "http://backendServlet/", className = "backendservlet.GetIncidencesByDate")
    @ResponseWrapper(localName = "getIncidencesByDateResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetIncidencesByDateResponse")
    public List<Incidence> getIncidencesByDate(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<backendservlet.Accessibility>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccesibilityByLocal", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAccesibilityByLocal")
    @ResponseWrapper(localName = "getAccesibilityByLocalResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAccesibilityByLocalResponse")
    public List<Accessibility> getAccesibilityByLocal(
        @WebParam(name = "arg0", targetNamespace = "")
        Local arg0);

    /**
     * 
     * @return
     *     returns java.util.List<backendservlet.IncidenceType>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllIncidenceTypes", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAllIncidenceTypes")
    @ResponseWrapper(localName = "getAllIncidenceTypesResponse", targetNamespace = "http://backendServlet/", className = "backendservlet.GetAllIncidenceTypesResponse")
    public List<IncidenceType> getAllIncidenceTypes();

}
